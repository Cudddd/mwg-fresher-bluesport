// <auto-generated />
using Bluesport.Data.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Bluesport.Data.Migrations
{
    [DbContext(typeof(BluesportDbContext))]
    [Migration("20210822045954_CreateDB")]
    partial class CreateDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "6.0.0-preview.1.21102.2")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Bluesport.Data.Entities.BannerTypes", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("BannerTypes");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Banners", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("alt")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.Property<string>("typeId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("typeId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Brands", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Categories", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<int>("level")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("parentId")
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Colors", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Contacts", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<string>("cusEmail")
                        .HasColumnType("text");

                    b.Property<string>("cusName")
                        .HasColumnType("text");

                    b.Property<string>("cusPhone")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnType("text");

                    b.Property<string>("topicId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("topicId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductDetails", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("detail")
                        .HasColumnType("text");

                    b.Property<string>("productId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("ProductDetails");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductImages", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("alt")
                        .HasColumnType("text");

                    b.Property<bool>("avatar")
                        .HasColumnType("boolean");

                    b.Property<string>("path")
                        .HasColumnType("text");

                    b.Property<string>("productId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductMapCate", b =>
                {
                    b.Property<string>("productId")
                        .HasColumnType("text");

                    b.Property<string>("cateId")
                        .HasColumnType("text");

                    b.HasKey("productId", "cateId");

                    b.HasIndex("cateId");

                    b.ToTable("ProductMapCate");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductMapSize", b =>
                {
                    b.Property<string>("productId")
                        .HasColumnType("text");

                    b.Property<string>("sizeId")
                        .HasColumnType("text");

                    b.HasKey("productId", "sizeId");

                    b.HasIndex("sizeId");

                    b.ToTable("ProductMapSize");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Products", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("brandId")
                        .HasColumnType("text");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<int>("installment")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<decimal>("priceCurrent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("priceOld")
                        .HasColumnType("numeric");

                    b.Property<int>("saleOff")
                        .HasColumnType("integer");

                    b.Property<string>("slug")
                        .HasColumnType("text");

                    b.Property<bool>("soldOut")
                        .HasColumnType("boolean");

                    b.HasKey("id");

                    b.HasIndex("brandId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.PromotionDetails", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("info")
                        .HasColumnType("text");

                    b.Property<bool>("more")
                        .HasColumnType("boolean");

                    b.Property<bool>("online")
                        .HasColumnType("boolean");

                    b.Property<string>("promotionId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("promotionId");

                    b.ToTable("PromotionDetails");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Promotions", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("productId")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.SizeMapColor", b =>
                {
                    b.Property<string>("sizeId")
                        .HasColumnType("text");

                    b.Property<string>("colorId")
                        .HasColumnType("text");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.HasKey("sizeId", "colorId");

                    b.HasIndex("colorId");

                    b.ToTable("SizeMapColor");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Sizes", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Topics", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Banners", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.BannerTypes", "bannerType")
                        .WithMany("banners")
                        .HasForeignKey("typeId");

                    b.Navigation("bannerType");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Contacts", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Topics", "topic")
                        .WithMany("contacts")
                        .HasForeignKey("topicId");

                    b.Navigation("topic");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductDetails", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Products", "product")
                        .WithMany("productDetails")
                        .HasForeignKey("productId");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductImages", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Products", "product")
                        .WithMany("productImgaes")
                        .HasForeignKey("productId");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductMapCate", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Categories", "category")
                        .WithMany("productMapCates")
                        .HasForeignKey("cateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bluesport.Data.Entities.Products", "product")
                        .WithMany("productMapCates")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.ProductMapSize", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Products", "product")
                        .WithMany("productMapsizes")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bluesport.Data.Entities.Sizes", "size")
                        .WithMany("productMapSizes")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("size");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Products", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Brands", "brand")
                        .WithMany("products")
                        .HasForeignKey("brandId");

                    b.Navigation("brand");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.PromotionDetails", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Promotions", "promotion")
                        .WithMany("promotionDetails")
                        .HasForeignKey("promotionId");

                    b.Navigation("promotion");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Promotions", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Products", "product")
                        .WithMany("promotions")
                        .HasForeignKey("productId");

                    b.Navigation("product");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.SizeMapColor", b =>
                {
                    b.HasOne("Bluesport.Data.Entities.Colors", "color")
                        .WithMany("sizeMapColors")
                        .HasForeignKey("colorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bluesport.Data.Entities.Sizes", "size")
                        .WithMany("sizeMapColors")
                        .HasForeignKey("sizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("color");

                    b.Navigation("size");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.BannerTypes", b =>
                {
                    b.Navigation("banners");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Brands", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Categories", b =>
                {
                    b.Navigation("productMapCates");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Colors", b =>
                {
                    b.Navigation("sizeMapColors");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Products", b =>
                {
                    b.Navigation("productDetails");

                    b.Navigation("productImgaes");

                    b.Navigation("productMapCates");

                    b.Navigation("productMapsizes");

                    b.Navigation("promotions");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Promotions", b =>
                {
                    b.Navigation("promotionDetails");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Sizes", b =>
                {
                    b.Navigation("productMapSizes");

                    b.Navigation("sizeMapColors");
                });

            modelBuilder.Entity("Bluesport.Data.Entities.Topics", b =>
                {
                    b.Navigation("contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
